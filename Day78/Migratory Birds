import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'migratoryBirds' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static int migratoryBirds(List<Integer> arr) {
    // Write your code here
        HashMap<Integer, Integer> hm = new HashMap<>();

    for (int i : arr) {
        if (!hm.containsKey(i)) {
            hm.put(i, 1);
        } else {
            int sightings = hm.get(i);
            hm.put(i, sightings + 1);
        }
    }

    Iterator hmIterator = hm.entrySet().iterator();
    int solution_sightings = 0;
    int solution_id = 0;

    while (hmIterator.hasNext()) {
        Map.Entry mapElement = (Map.Entry)hmIterator.next();
        int sightings = ((int)mapElement.getValue());
        int id = ((int)mapElement.getKey());

        if (sightings > solution_sightings) {
            solution_sightings = sightings;
            solution_id = id;
        }
    }

    return solution_id;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arrCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.migratoryBirds(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
